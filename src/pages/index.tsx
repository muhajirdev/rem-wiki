import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Script from "next/script";
import { useState } from "react";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Rem Wiki</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <Auth />
      </main>
      <Script
        id="live-chat"
        dangerouslySetInnerHTML={{
          __html: `
var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
(function(){
var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
s1.async=true;
s1.src='https://embed.tawk.to/63c94c66c2f1ac1e202e8c34/1gn554snp';
s1.charset='UTF-8';
s1.setAttribute('crossorigin','*');
s0.parentNode.insertBefore(s1,s0);
})();
      `,
        }}
      ></Script>
    </>
  );
};

export default Home;

const LoggedOut = () => {
  return (
    <div className="flex flex-col justify-center text-lg text-white">
      <h1>Welcome To Rem wiki</h1>

      <button
        className="mt-4 rounded-full bg-white/10 px-10 py-3 font-semibold no-underline transition hover:bg-white/20"
        onClick={() => signIn("google")}
      >
        Sign in
      </button>
    </div>
  );
};

const UsernameForm = () => {
  const [username, setUsername] = useState("");
  const mutation = trpc.auth.updateUsername.useMutation();
  const onSubmit = (e) => {
    e.preventDefault();
    mutation.mutate(
      { username },
      { onSuccess: () => window.location.reload() }
    );
  };
  return (
    <div className="flex flex-col text-white">
      <div className="mb-4 text-xl">
        Welcome to Rem Wiki. What username do you want to use?
      </div>
      <form onSubmit={onSubmit} className="flex space-x-4">
        <input
          type="text"
          value={username}
          placeholder="Your username"
          className="flex-1 rounded-lg bg-black/20 px-4 py-4 outline-none"
          onChange={(e) => setUsername(e.target.value)}
        />
        <button
          type="submit"
          className="rounded-lg bg-slate-200 px-4 py-2 text-slate-900 text-white"
        >
          Submit
        </button>
      </form>
    </div>
  );
};

const DigitalGardenInformation = () => {
  const { data: usernameAndApiKey } = trpc.auth.getUsernameAndApiKey.useQuery();
  const url = `https://rem.wiki/${usernameAndApiKey?.username}`;
  const apiKey = usernameAndApiKey?.apiKey;
  return (
    <div className="space-y-8 text-white">
      <div className="space-x-4">
        <span>Your API Key:</span>
        <code className="rounded-lg bg-black/20 p-4">{apiKey}</code>
      </div>
      <div className="flex items-center justify-center space-x-4">
        <a
          className="flex rounded-full bg-slate-100 px-4 py-2 font-semibold text-slate-900 "
          href={url}
        >
          Go to my garden
        </a>
      </div>
      <div className="text-center">
        Custom domain? Ping me on{" "}
        <button
          onClick={() => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            window?.Tawk_API?.toggle();
          }}
          className="font-bold underline"
        >
          live chat
        </button>
      </div>
    </div>
  );
};

const LoggedIn = () => {
  const { data: usernameAndApiKey, isLoading } =
    trpc.auth.getUsernameAndApiKey.useQuery();
  const username = usernameAndApiKey?.username;

  return (
    <div className="flex flex-col items-center px-8">
      {!username && !isLoading ? (
        <UsernameForm />
      ) : (
        <DigitalGardenInformation />
      )}

      <button
        className="mt-16 rounded-full bg-white/10 px-10 py-3 font-semibold text-slate-400 no-underline transition hover:bg-white/20"
        onClick={() => signOut()}
      >
        Sign out
      </button>
    </div>
  );
};

const Auth: React.FC = () => {
  const { data: sessionData } = useSession();

  if (!sessionData) return <LoggedOut />;
  return <LoggedIn />;
};
